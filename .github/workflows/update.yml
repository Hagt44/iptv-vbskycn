name: Sync Upstream Daily

on:
  schedule:
    - cron: '0 2 * * *'  # 每天 2:00 UTC 触发
  workflow_dispatch:  # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v3

      - name: Set up Git config
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add remote repository
        run: git remote add upstream https://github.com/vbskycn/iptv.git

      - name: Fetch latest changes from upstream
        run: |
          git fetch upstream
          echo "Fetched upstream changes."

      - name: Determine target branch
        id: vars
        run: |
          echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "Target branch: ${{ env.BRANCH_NAME }}"

      - name: Install Ruby # 手动安装 Ruby
        run: |
          sudo apt-get update # 更新 apt 软件包列表
          sudo apt-get install -y rbenv ruby-build # 安装 rbenv 和 ruby-build
          ruby-build 3.1.4 /opt/hostedtoolcache/Ruby/3.1.4/x64 # 使用 ruby-build 构建 Ruby 3.1.4 并安装到工具缓存
          touch /opt/hostedtoolcache/Ruby/3.1.4/x64.complete # 创建标记文件，表示安装完成
          echo "Ruby 3.1.4 installed to tool cache."

      - name: Merge upstream/master into current branch (excluding workflow files)
        run: |
          set -e
          git merge -X theirs --strategy=recursive --allow-unrelated-histories upstream/master -- . ':!**/.github/workflows/*'
          echo "Merged upstream/master into ${{ env.BRANCH_NAME }} (excluding workflow files)"
        if: ${{ env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'main' }}


      - name: Reset workflow files to avoid pushing
        run: |
          git checkout HEAD -- .github/workflows/
          echo "Reset workflow files."

      - name: Push changes
        run: |
          TARGET_BRANCH=${{ env.BRANCH_NAME }}
          if [[ "$TARGET_BRANCH" == "master" ]]; then
            git push origin master
            echo "Pushed changes to master."
          elif [[ "$TARGET_BRANCH" == "main" ]]; then
            git push origin main
            echo "Pushed changes to main."
          else
            echo "Skipping push: Not master or main branch."
          fi
        if: ${{ env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'main' }}
